#!/usr/bin/python3

import sys
import os
import subprocess
import shutil
import time
import tempfile

from metrics import EOSMetrics

class MVPUploader(EOSMetrics):

    def __init__(self, storage_path=None):
        super().__init__()
        if storage_path is None:
            '''
            TODO: Use dialog window instead
            '''
            print('Please assign the metrics data storage path')
        else:
            self.offline_metrics_usbdisk_node = storage_path
        self.offline_metrics_src_dir = 'eos-metrics-data'
	self.offline_tmp_metrics_dir = ''

    def copy_metrics_data_and_upload(self):
        if (self.get_service_state() == 0):     #active
            subprocess.check_output(['/usr/bin/systemctl', 'stop', self.systemd_service])
        srcdir = os.path.join(self.offline_metrics_usbdisk_node, self.offline_metrics_src_dir)
        for machine_dir in os.listdir(srcdir):
            self.offline_tmp_metrics_dir = tempfile.mkdtemp()
            machine_path = os.path.join(srcdir, machine_dir)
            for file in os.listdir(machine_path):
                shutil.copy(os.path.join(machine_path, file), self.offline_tmp_metrics_dir)

            subprocess.Popen(['sudo', 'chown', '-R', 'metrics:metrics', self.offline_tmp_metrics_dir])
            persistent_cache_dir_arg = '--persistent-cache-directory=' + self.offline_tmp_metrics_dir
            tracking_id_path_arg = '--tracking-id-file-path=' + self.offline_tmp_metrics_dir + '/tracking-id'
            self.daemon = subprocess.Popen(['sudo', '-u', 'metrics', '/lib/eos-event-recorder-daemon/eos-metrics-event-recorder', persistent_cache_dir_arg, tracking_id_path_arg])

            timeout = 0
            while timeout < 5:
                time.sleep(1)
                if self.metrics_proc_exists():
                    break
                timeout = timeout + 1

            if timeout >= 5:
                raise RuntimeError ('Fail to launch eos-metrics-event-recorder')

            try:
                subprocess.check_output(['/usr/bin/eos-upload-metrics'])
            except subprocess.CalledProcessError as e:
                raise RuntimeError ('Upload Fail. Please check the network connectivity')
            subprocess.check_output(['sudo', 'killall', '/lib/eos-event-recorder-daemon/eos-metrics-event-recorder'])
            subprocess.check_output(['sudo', 'rm', '-rf', self.offline_tmp_metrics_dir])

    def __del__(self):
        '''
        Remove temporary cache data, kill the eos-metrics-event-recorder.
        And restart the service
        '''
        if os.path.exists(self.offline_tmp_metrics_dir):
	        subprocess.check_output(['sudo', 'rm', '-rf', self.offline_tmp_metrics_dir])
        if self.metrics_proc_exists():
            subprocess.check_output(['sudo', 'killall', '/lib/eos-event-recorder-daemon/eos-metrics-event-recorder'])
        if (self.get_service_state() != 0):
            subprocess.check_output(['/usr/bin/systemctl', 'start', self.systemd_service])

def main():
    location = os.path.dirname(os.path.realpath(sys.argv[0]))
    uploader = MVPUploader(location)
    if uploader.get_eos_version() < 3.9:
        print("Please run this command on >= EOS 3.9")
    else:
        uploader.copy_metrics_data_and_upload()

if __name__ == '__main__':
    main()

